#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
require 'optparse'
require 'rmre'

options = {:db => {}}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: rmre -a ADAPTER -d DATABASE [options]"
  
  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end

  opts.on('-a', '--adapter ADAPTER', 'ActiveRecord adapter to use') do |a|
    options[:db][:adapter] = a
  end

  opts.on('-d', '--database DATABASE', 'Database name') do |d|
    options[:db][:database] = d
  end

  options[:db][:username] = ''
  opts.on('-u', '--user [USER]', 'Databse connection username (default empty)') do |u|
    options[:db][:username] = u
  end

  options[:db][:password] = ''
  opts.on('-p', '--pass [PASS]', 'Database connection password (default empty)') do |p|
    options[:db][:password] = p
  end

  opts.on('-m', '--mode [MODE]', 'MS SQL conenction mode (ODBC only)') do |m|
    options[:db][:mode] = m
  end

  opts.on('-n', '--dsn [DSN]', 'ODBC DSN name (MS SQL only)') do |n|
    options[:db][:dsn] = n
  end
  
  options[:out_path] = File.expand_path(File.join(Dir.tmpdir, "rmre_models"))
  opts.on('-o', '--out [PATH]', 'Path where models will be generated (default <TMP>/rmre_models)') do |p|
    options[:out_path] = p
  end

  opts.on('-s', '--host [HOST]', 'IP address or name of the host') do |s|
    options[:db][:host] = s
  end
  
  opts.on('-i', '--include pattern1,pattern2', Array, 'Include prefixes') do |i|
    options[:include] = i
  end

  opts.on('-v', '--version', "Prints gem version") do |v|
    puts "Rmre version #{Rmre::VERSION}"
    exit
  end

  opts.on('--dump-schema [FILE]', 'Create schema migration to FILE') do |ds_file|
    options[:dump_schema] = ds_file
  end
end

begin
  optparse.parse!
rescue OptionParser::ParseError => pe
  puts pe.message
  puts optparse
  exit
end

unless options[:db][:adapter] && options[:db][:database]
  puts "Missing required arguments -a (--adapter) and -d (--database)"
  puts optparse
  exit
end

generator = Rmre::Generator.new(options[:db], options[:out_path], options[:include])

begin
  generator.connect
rescue Exception => e
  puts e.message
  exit
end

if options[:dump_schema]
  File.open(options[:dump_schema], 'w') do |file|
    generator.dump_schema(file)
  end
else
  generator.create_models(generator.connection.tables)
end
